/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "harmonycloud.cn/stellaris/pkg/apis/multicluster/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MultiClusterResourceSchedulePolicyLister helps list MultiClusterResourceSchedulePolicies.
// All objects returned here must be treated as read-only.
type MultiClusterResourceSchedulePolicyLister interface {
	// List lists all MultiClusterResourceSchedulePolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MultiClusterResourceSchedulePolicy, err error)
	// MultiClusterResourceSchedulePolicies returns an object that can list and get MultiClusterResourceSchedulePolicies.
	MultiClusterResourceSchedulePolicies(namespace string) MultiClusterResourceSchedulePolicyNamespaceLister
	MultiClusterResourceSchedulePolicyListerExpansion
}

// multiClusterResourceSchedulePolicyLister implements the MultiClusterResourceSchedulePolicyLister interface.
type multiClusterResourceSchedulePolicyLister struct {
	indexer cache.Indexer
}

// NewMultiClusterResourceSchedulePolicyLister returns a new MultiClusterResourceSchedulePolicyLister.
func NewMultiClusterResourceSchedulePolicyLister(indexer cache.Indexer) MultiClusterResourceSchedulePolicyLister {
	return &multiClusterResourceSchedulePolicyLister{indexer: indexer}
}

// List lists all MultiClusterResourceSchedulePolicies in the indexer.
func (s *multiClusterResourceSchedulePolicyLister) List(selector labels.Selector) (ret []*v1alpha1.MultiClusterResourceSchedulePolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MultiClusterResourceSchedulePolicy))
	})
	return ret, err
}

// MultiClusterResourceSchedulePolicies returns an object that can list and get MultiClusterResourceSchedulePolicies.
func (s *multiClusterResourceSchedulePolicyLister) MultiClusterResourceSchedulePolicies(namespace string) MultiClusterResourceSchedulePolicyNamespaceLister {
	return multiClusterResourceSchedulePolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MultiClusterResourceSchedulePolicyNamespaceLister helps list and get MultiClusterResourceSchedulePolicies.
// All objects returned here must be treated as read-only.
type MultiClusterResourceSchedulePolicyNamespaceLister interface {
	// List lists all MultiClusterResourceSchedulePolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MultiClusterResourceSchedulePolicy, err error)
	// Get retrieves the MultiClusterResourceSchedulePolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MultiClusterResourceSchedulePolicy, error)
	MultiClusterResourceSchedulePolicyNamespaceListerExpansion
}

// multiClusterResourceSchedulePolicyNamespaceLister implements the MultiClusterResourceSchedulePolicyNamespaceLister
// interface.
type multiClusterResourceSchedulePolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MultiClusterResourceSchedulePolicies in the indexer for a given namespace.
func (s multiClusterResourceSchedulePolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MultiClusterResourceSchedulePolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MultiClusterResourceSchedulePolicy))
	})
	return ret, err
}

// Get retrieves the MultiClusterResourceSchedulePolicy from the indexer for a given namespace and name.
func (s multiClusterResourceSchedulePolicyNamespaceLister) Get(name string) (*v1alpha1.MultiClusterResourceSchedulePolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("multiclusterresourceschedulepolicy"), name)
	}
	return obj.(*v1alpha1.MultiClusterResourceSchedulePolicy), nil
}
