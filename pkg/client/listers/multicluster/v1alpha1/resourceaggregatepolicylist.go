/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "harmonycloud.cn/multi-cluster-manager/pkg/apis/multicluster/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ResourceAggregatePolicyListLister helps list ResourceAggregatePolicyLists.
// All objects returned here must be treated as read-only.
type ResourceAggregatePolicyListLister interface {
	// List lists all ResourceAggregatePolicyLists in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ResourceAggregatePolicyList, err error)
	// ResourceAggregatePolicyLists returns an object that can list and get ResourceAggregatePolicyLists.
	ResourceAggregatePolicyLists(namespace string) ResourceAggregatePolicyListNamespaceLister
	ResourceAggregatePolicyListListerExpansion
}

// resourceAggregatePolicyListLister implements the ResourceAggregatePolicyListLister interface.
type resourceAggregatePolicyListLister struct {
	indexer cache.Indexer
}

// NewResourceAggregatePolicyListLister returns a new ResourceAggregatePolicyListLister.
func NewResourceAggregatePolicyListLister(indexer cache.Indexer) ResourceAggregatePolicyListLister {
	return &resourceAggregatePolicyListLister{indexer: indexer}
}

// List lists all ResourceAggregatePolicyLists in the indexer.
func (s *resourceAggregatePolicyListLister) List(selector labels.Selector) (ret []*v1alpha1.ResourceAggregatePolicyList, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ResourceAggregatePolicyList))
	})
	return ret, err
}

// ResourceAggregatePolicyLists returns an object that can list and get ResourceAggregatePolicyLists.
func (s *resourceAggregatePolicyListLister) ResourceAggregatePolicyLists(namespace string) ResourceAggregatePolicyListNamespaceLister {
	return resourceAggregatePolicyListNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ResourceAggregatePolicyListNamespaceLister helps list and get ResourceAggregatePolicyLists.
// All objects returned here must be treated as read-only.
type ResourceAggregatePolicyListNamespaceLister interface {
	// List lists all ResourceAggregatePolicyLists in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ResourceAggregatePolicyList, err error)
	// Get retrieves the ResourceAggregatePolicyList from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ResourceAggregatePolicyList, error)
	ResourceAggregatePolicyListNamespaceListerExpansion
}

// resourceAggregatePolicyListNamespaceLister implements the ResourceAggregatePolicyListNamespaceLister
// interface.
type resourceAggregatePolicyListNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ResourceAggregatePolicyLists in the indexer for a given namespace.
func (s resourceAggregatePolicyListNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ResourceAggregatePolicyList, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ResourceAggregatePolicyList))
	})
	return ret, err
}

// Get retrieves the ResourceAggregatePolicyList from the indexer for a given namespace and name.
func (s resourceAggregatePolicyListNamespaceLister) Get(name string) (*v1alpha1.ResourceAggregatePolicyList, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("resourceaggregatepolicylist"), name)
	}
	return obj.(*v1alpha1.ResourceAggregatePolicyList), nil
}
