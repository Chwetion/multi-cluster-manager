/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "harmonycloud.cn/multi-cluster-manager/pkg/apis/multicluster/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AggregatedResourceListLister helps list AggregatedResourceLists.
// All objects returned here must be treated as read-only.
type AggregatedResourceListLister interface {
	// List lists all AggregatedResourceLists in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AggregatedResourceList, err error)
	// AggregatedResourceLists returns an object that can list and get AggregatedResourceLists.
	AggregatedResourceLists(namespace string) AggregatedResourceListNamespaceLister
	AggregatedResourceListListerExpansion
}

// aggregatedResourceListLister implements the AggregatedResourceListLister interface.
type aggregatedResourceListLister struct {
	indexer cache.Indexer
}

// NewAggregatedResourceListLister returns a new AggregatedResourceListLister.
func NewAggregatedResourceListLister(indexer cache.Indexer) AggregatedResourceListLister {
	return &aggregatedResourceListLister{indexer: indexer}
}

// List lists all AggregatedResourceLists in the indexer.
func (s *aggregatedResourceListLister) List(selector labels.Selector) (ret []*v1alpha1.AggregatedResourceList, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AggregatedResourceList))
	})
	return ret, err
}

// AggregatedResourceLists returns an object that can list and get AggregatedResourceLists.
func (s *aggregatedResourceListLister) AggregatedResourceLists(namespace string) AggregatedResourceListNamespaceLister {
	return aggregatedResourceListNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AggregatedResourceListNamespaceLister helps list and get AggregatedResourceLists.
// All objects returned here must be treated as read-only.
type AggregatedResourceListNamespaceLister interface {
	// List lists all AggregatedResourceLists in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AggregatedResourceList, err error)
	// Get retrieves the AggregatedResourceList from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AggregatedResourceList, error)
	AggregatedResourceListNamespaceListerExpansion
}

// aggregatedResourceListNamespaceLister implements the AggregatedResourceListNamespaceLister
// interface.
type aggregatedResourceListNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AggregatedResourceLists in the indexer for a given namespace.
func (s aggregatedResourceListNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AggregatedResourceList, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AggregatedResourceList))
	})
	return ret, err
}

// Get retrieves the AggregatedResourceList from the indexer for a given namespace and name.
func (s aggregatedResourceListNamespaceLister) Get(name string) (*v1alpha1.AggregatedResourceList, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("aggregatedresourcelist"), name)
	}
	return obj.(*v1alpha1.AggregatedResourceList), nil
}
