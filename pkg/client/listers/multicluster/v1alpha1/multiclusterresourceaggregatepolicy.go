/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "harmonycloud.cn/multi-cluster-manager/pkg/apis/multicluster/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MultiClusterResourceAggregatePolicyLister helps list MultiClusterResourceAggregatePolicies.
// All objects returned here must be treated as read-only.
type MultiClusterResourceAggregatePolicyLister interface {
	// List lists all MultiClusterResourceAggregatePolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MultiClusterResourceAggregatePolicy, err error)
	// MultiClusterResourceAggregatePolicies returns an object that can list and get MultiClusterResourceAggregatePolicies.
	MultiClusterResourceAggregatePolicies(namespace string) MultiClusterResourceAggregatePolicyNamespaceLister
	MultiClusterResourceAggregatePolicyListerExpansion
}

// multiClusterResourceAggregatePolicyLister implements the MultiClusterResourceAggregatePolicyLister interface.
type multiClusterResourceAggregatePolicyLister struct {
	indexer cache.Indexer
}

// NewMultiClusterResourceAggregatePolicyLister returns a new MultiClusterResourceAggregatePolicyLister.
func NewMultiClusterResourceAggregatePolicyLister(indexer cache.Indexer) MultiClusterResourceAggregatePolicyLister {
	return &multiClusterResourceAggregatePolicyLister{indexer: indexer}
}

// List lists all MultiClusterResourceAggregatePolicies in the indexer.
func (s *multiClusterResourceAggregatePolicyLister) List(selector labels.Selector) (ret []*v1alpha1.MultiClusterResourceAggregatePolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MultiClusterResourceAggregatePolicy))
	})
	return ret, err
}

// MultiClusterResourceAggregatePolicies returns an object that can list and get MultiClusterResourceAggregatePolicies.
func (s *multiClusterResourceAggregatePolicyLister) MultiClusterResourceAggregatePolicies(namespace string) MultiClusterResourceAggregatePolicyNamespaceLister {
	return multiClusterResourceAggregatePolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MultiClusterResourceAggregatePolicyNamespaceLister helps list and get MultiClusterResourceAggregatePolicies.
// All objects returned here must be treated as read-only.
type MultiClusterResourceAggregatePolicyNamespaceLister interface {
	// List lists all MultiClusterResourceAggregatePolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MultiClusterResourceAggregatePolicy, err error)
	// Get retrieves the MultiClusterResourceAggregatePolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MultiClusterResourceAggregatePolicy, error)
	MultiClusterResourceAggregatePolicyNamespaceListerExpansion
}

// multiClusterResourceAggregatePolicyNamespaceLister implements the MultiClusterResourceAggregatePolicyNamespaceLister
// interface.
type multiClusterResourceAggregatePolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MultiClusterResourceAggregatePolicies in the indexer for a given namespace.
func (s multiClusterResourceAggregatePolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MultiClusterResourceAggregatePolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MultiClusterResourceAggregatePolicy))
	})
	return ret, err
}

// Get retrieves the MultiClusterResourceAggregatePolicy from the indexer for a given namespace and name.
func (s multiClusterResourceAggregatePolicyNamespaceLister) Get(name string) (*v1alpha1.MultiClusterResourceAggregatePolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("multiclusterresourceaggregatepolicy"), name)
	}
	return obj.(*v1alpha1.MultiClusterResourceAggregatePolicy), nil
}
