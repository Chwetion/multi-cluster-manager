/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "harmonycloud.cn/multi-cluster-manager/pkg/apis/multicluster/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MultiClusterResourceAggregatePolicyListLister helps list MultiClusterResourceAggregatePolicyLists.
// All objects returned here must be treated as read-only.
type MultiClusterResourceAggregatePolicyListLister interface {
	// List lists all MultiClusterResourceAggregatePolicyLists in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MultiClusterResourceAggregatePolicyList, err error)
	// MultiClusterResourceAggregatePolicyLists returns an object that can list and get MultiClusterResourceAggregatePolicyLists.
	MultiClusterResourceAggregatePolicyLists(namespace string) MultiClusterResourceAggregatePolicyListNamespaceLister
	MultiClusterResourceAggregatePolicyListListerExpansion
}

// multiClusterResourceAggregatePolicyListLister implements the MultiClusterResourceAggregatePolicyListLister interface.
type multiClusterResourceAggregatePolicyListLister struct {
	indexer cache.Indexer
}

// NewMultiClusterResourceAggregatePolicyListLister returns a new MultiClusterResourceAggregatePolicyListLister.
func NewMultiClusterResourceAggregatePolicyListLister(indexer cache.Indexer) MultiClusterResourceAggregatePolicyListLister {
	return &multiClusterResourceAggregatePolicyListLister{indexer: indexer}
}

// List lists all MultiClusterResourceAggregatePolicyLists in the indexer.
func (s *multiClusterResourceAggregatePolicyListLister) List(selector labels.Selector) (ret []*v1alpha1.MultiClusterResourceAggregatePolicyList, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MultiClusterResourceAggregatePolicyList))
	})
	return ret, err
}

// MultiClusterResourceAggregatePolicyLists returns an object that can list and get MultiClusterResourceAggregatePolicyLists.
func (s *multiClusterResourceAggregatePolicyListLister) MultiClusterResourceAggregatePolicyLists(namespace string) MultiClusterResourceAggregatePolicyListNamespaceLister {
	return multiClusterResourceAggregatePolicyListNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MultiClusterResourceAggregatePolicyListNamespaceLister helps list and get MultiClusterResourceAggregatePolicyLists.
// All objects returned here must be treated as read-only.
type MultiClusterResourceAggregatePolicyListNamespaceLister interface {
	// List lists all MultiClusterResourceAggregatePolicyLists in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MultiClusterResourceAggregatePolicyList, err error)
	// Get retrieves the MultiClusterResourceAggregatePolicyList from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MultiClusterResourceAggregatePolicyList, error)
	MultiClusterResourceAggregatePolicyListNamespaceListerExpansion
}

// multiClusterResourceAggregatePolicyListNamespaceLister implements the MultiClusterResourceAggregatePolicyListNamespaceLister
// interface.
type multiClusterResourceAggregatePolicyListNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MultiClusterResourceAggregatePolicyLists in the indexer for a given namespace.
func (s multiClusterResourceAggregatePolicyListNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MultiClusterResourceAggregatePolicyList, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MultiClusterResourceAggregatePolicyList))
	})
	return ret, err
}

// Get retrieves the MultiClusterResourceAggregatePolicyList from the indexer for a given namespace and name.
func (s multiClusterResourceAggregatePolicyListNamespaceLister) Get(name string) (*v1alpha1.MultiClusterResourceAggregatePolicyList, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("multiclusterresourceaggregatepolicylist"), name)
	}
	return obj.(*v1alpha1.MultiClusterResourceAggregatePolicyList), nil
}
