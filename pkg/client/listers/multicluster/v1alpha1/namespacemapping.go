/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "harmonycloud.cn/stellaris/pkg/apis/multicluster/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NamespaceMappingLister helps list NamespaceMappings.
// All objects returned here must be treated as read-only.
type NamespaceMappingLister interface {
	// List lists all NamespaceMappings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NamespaceMapping, err error)
	// NamespaceMappings returns an object that can list and get NamespaceMappings.
	NamespaceMappings(namespace string) NamespaceMappingNamespaceLister
	NamespaceMappingListerExpansion
}

// namespaceMappingLister implements the NamespaceMappingLister interface.
type namespaceMappingLister struct {
	indexer cache.Indexer
}

// NewNamespaceMappingLister returns a new NamespaceMappingLister.
func NewNamespaceMappingLister(indexer cache.Indexer) NamespaceMappingLister {
	return &namespaceMappingLister{indexer: indexer}
}

// List lists all NamespaceMappings in the indexer.
func (s *namespaceMappingLister) List(selector labels.Selector) (ret []*v1alpha1.NamespaceMapping, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NamespaceMapping))
	})
	return ret, err
}

// NamespaceMappings returns an object that can list and get NamespaceMappings.
func (s *namespaceMappingLister) NamespaceMappings(namespace string) NamespaceMappingNamespaceLister {
	return namespaceMappingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NamespaceMappingNamespaceLister helps list and get NamespaceMappings.
// All objects returned here must be treated as read-only.
type NamespaceMappingNamespaceLister interface {
	// List lists all NamespaceMappings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NamespaceMapping, err error)
	// Get retrieves the NamespaceMapping from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NamespaceMapping, error)
	NamespaceMappingNamespaceListerExpansion
}

// namespaceMappingNamespaceLister implements the NamespaceMappingNamespaceLister
// interface.
type namespaceMappingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NamespaceMappings in the indexer for a given namespace.
func (s namespaceMappingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NamespaceMapping, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NamespaceMapping))
	})
	return ret, err
}

// Get retrieves the NamespaceMapping from the indexer for a given namespace and name.
func (s namespaceMappingNamespaceLister) Get(name string) (*v1alpha1.NamespaceMapping, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("namespacemapping"), name)
	}
	return obj.(*v1alpha1.NamespaceMapping), nil
}
